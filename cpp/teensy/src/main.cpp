#include <Arduino.h>
#include "arm_math.h"
#include "arm_const_structs.h"
#include "DSP.h"

/*These are just to measure the time it takes to run the entire code. 
Without all the Serial prints we go down to 666 microseconds.*/
unsigned long timeDiff; 
unsigned long startTime;
unsigned long endTime;



int16_t samplesRaw[SAMPLE_LENGTH] = {
338, 2244, -714, -1040, -1751, 938, -66, 1164, 1377, -901, -1184, -405, -1019, -1556, -1098, -293, 1386, -122, -534, -622, -145, 566, -769, 340, 271, 1340, 1677, -147, -551, -2647, -533, -347, 54, 512, -406, -1345, -1106, 1147, 669, -341, 1511, -1147, -1542, -645, 1343, 465, -798, 973, -924, -22, -1280, -1491, -98, 3, -3050, -32, -474, -1397, -30, -1403, -2963, -954, 1086, 1518, 463, -956, -114, 182, -1605, -2677, 432, 29, 979, -956, -593, -1465, 772, -779, 59, 1044, -1198, 500, -23, -983, -2192, -630, -999, -405, 714, 484, 943, -559, 2267, -1353, -1632, 64, -124, 125, -137, -327, 1402, 195, 1038, 404, -69, -2427, -850, 453, -110, 599, 891, 1367, 1930, -1990, -1047, 278, 720, -129, -807, -1462, 1633, 1079, -759, 1902, 662, -699, 1139, 92, -1897, -422, -1568, -435, 411, -2326, -1860, -416, 935, -290, 167, 1930, -407, 92, 777, 1165, -1791, 1137, 1175, 705, 350, 1878, 126, -1025, -1531, -669, 784, -301, -52, -563, 640, -292, 459, 920, -522, 2702, 406, -2009, -1196, -811, 1477, 686, -397, 2921, -541, 981, -620, -443, -1983, -1696, -511, -119, 82, -521, 979, 1253, -235, -779, -355, -1181, -458, 1339, -677, 135, 568, -1474, -458, -86, 1147, 1459, 265, -1005, 1218, -758, -885, -401, -1779, -1613, 318, 508, 243, -557, 1797, 63, 788, 1225, -197, 1432, -759, -923, 287, -471, -59, 468, -1161, 2827, -1202, -1456, 294, -491, -121, -386, -255, -208, 1098, 840, 355, -626, -2388, 1632, -598, 996, 1184, 381, 1209, 153, -789, -981, -167, 949, 676, -1571, -1556, -250, -699, 940, -436, 459, -120, 286, 593, 875, -139, -1339, -1327, 46, -630, -1281, 541, -1580, -631, 993, -434, -832, -845, -870, -880, 1988, 457, -115, 1947, -86, -2443, 187, -439, 877, -17, -143, -147, 84, 722, -931, -638, 462, 2048, 1316, -1685, -598, -287, 1244, 477, 1191, 423, 2053, -1212, -732, -706, 83, -683, 498, -644, 541, -27, 560, -2965, 1413, 242, 2334, 1566, 667, 1902, 1356, 150, 1390, 178, 17, 2100, -181, -1905, 1142, -291, 879, -665, -126, -276, -1897, 1153, 1056, -95, 183, 1897, 968, -2026, 756, -347, 229, -433, -635, -2320, 1595, -160, 546, 947, 1694, -293, 1952, -134, -161, -394, -635, -945, 348, -408, 481, 464, 87, 412, 577, -29, -206, -855, 1604, -298, 1136, 1703, 1, -173, 399, 919, -828, 1466, -782, -1711, -1073, -1278, -867, -50, 214, 1586, 1703, -1212, 1071, 1445, -441, 651, 1021, -364, -2362, -879, 424, -335, -1310, -1814, -507, -192, -800, 1258, -103, -252, -901, 479, -1553, -1875, -58, -363, -1037, 387, 482, -1562, 521, -163, 929, 100, -2098, -462, -652, -536, -636, 459, -1011, -712, -141, 228, 208, 1987, -28, 701, 1125, -647, -832, 552, 607, 372, -809, 1980, 939, -970, -873, -32, 1839, -1223, -1875, 953, 624, -2397, 609, 219, -2516, -215, 1512, -3018, 502, -1206, 817, 751, 537, 1237, 323, 615, -1013, 385, 183, 703, 1072, -516, -387, 1618, -944, -2602, -1500, 1588, 1056, -742, 1546, -61, 554, -273, -270, 1579, -733, -1095, 707, 722, -319, 400, 572, 1608, -1808, 68, 923, -1291, -788, 180, -80, -956, -12, 255, -131, 1618, -727, -107, -378, 8, -37, 1610, 1027, 992, -578, 465, -88, -238, 702, 1414, -593, 941, -398, -550, 624, 938, 1218, 333, -591, -421, -512, -188, 1195, -54, -459, -661, 1270, 621, -1376, -582, -11, 161, -2510, -2074, 1193, -911, -10, -616, 1454, 538, -338, -721, 1209, -1297, 828, -478, 456, -413, -234, -457, 248, -254, 627, 552, 883, 28, -456, 1736, 626, 330, 1024, -607, 333, 187, 776, 222, -344, 133, 739, -878, 82, -243, -938, -468, -133, -1099, -953, 227, -367, 667, 426, 95, -2577, 985, -1389, -575, -1271, -740, 2280, -47, -1259, 743, -609, -539, 485, 658, -82, 251, 1742, 605, 862, -1146, -342, 921, -290, -165, -2350, 360, 51, -1428, 1372, 1257, -1806, -1655, -645, 881, 828, -1775, 454, 170, 135, -360, 372, 784, 459, -917, 85, -176, -552, 647, -499, 916, -476, 774, -1514, -1730, -1056, 3147, 109, -1284, -264, -1468, -260, 991, 204, -817, -614, -170, -1062, 660, -153, 776, 166, -1781, 479, -1156, -628, -954, -1384, 114, -135, 1312, 963, -613, -1433, -811, -426, -218, 1302, 1432, -523, -522, 896, -169, 904, -2010, 1261, 813, -830, -180, 607, 230, -865, 536, 501, -1278, -802, -9, -32, -277, 1995, -794, -1490, 1110, 786, -94, -689, -139, -406, 2034, 709, 1073, -1120, 2401, -1464, 612, -861, 405, -1777, -890, 601, -51, -232, 726, -171, 262, -1319, 93, 870, 562, 993, 14, -507, -489, 954, -483, -2454, 90, 976, -1818, 171, -1308, 1421, 729, -1295, 60, -267, -785, 297, -1147, -1659, 202, -598, 259, 1253, 1608, 1504, -505, 1101, 1593, -380, -22, 180, 293, 729, -1031, -220, 706, 1366, 1318, 744, -762, 610, -2143, -401, 1370, -806, -212, 1159, -1411, 1241, -32, -532, -1010, 1350, 418, 706, -646, -94, -255, 339, 382, -1289, -915, 1793, -1094, -1469, -25, -1704, 639, -631, -1115, -1539, 386, -1608, 1086, 634, -1265, 1327, -180, -551, -2813, -223, 796, -1685, -1925, -124, -1955, 1392, -1641, 310, 2325, -61, 1014, -536, -442, -389, -375, -1800, -385, -548, 1040, -974, 826, -1568, 1249, 639, -344, -1547, 1317, -916, 201, 19, 453, 604, 130, 412, -379, -39, -989, 51, -137, 413, -17, 1086, -1091, 39, 1356, -1850, 387, -1862, 277, -1526, 1435, -1151, 500, 1001, -385, -583, -45, -301, -59, 106, 668, -364, 2083, 466, -588, 467, 207, -330, -397, 1535, 475, -664, 217, -151, 541, 721, 1264, 128, 84, 116, 124, -284, 1334, -1558, 346, -476, -601, 2055, 477, -527, -1019, -509, 398, 451, 2556, 149, 871, 1, 102, -280, 606, -2801, -258, 1317, 1397, -1198, 24, 811, 526, 181, 1152, -1121, -889, 1585, -991, 317, -828, 79, -217, 3, 691, 1180, -294, 928, -1743, -455, -714, 129, -461, -1275, -1728, -1135, 770, 176, -1053, 333, 1659, 782, -294, 164, 445, 1013, 545, -126, -456, 2216, -1586, -872, 1155, 798, 569, 1418, -156, 159, 1033, 2362, -681, -24, -985, 2240, 1497, -2828, 310, 50, -46, 1769, -638, 185, -122, -2113, -1566, 1349, 490, -646, 953, -20, -424, -236, -224, -75, 430, -970, 1774, -695, -590, 215, 404, 1635, -350, -893, -1270, -808, 501, 667, -9, 57, 1779, -1103, 977, -887, 237, 255, -50, -1350, -390, -830, 1017, -1595, 1095, -126
};


void setup() {

  Serial.begin(9600);

  startTime= micros();

  q15_t *samplesFiltered = filterButterWorth9thOrder50kHz(samplesRaw); //Create a pointer in the q15_t format with the filtered signal.

  for (int i = 0; i < SAMPLE_LENGTH; i++)
  {
    Serial.print(samplesFiltered[i]); Serial.print(", ");
  }
  
  Serial.println("");
  Serial.println("=========================================================================================");
  Serial.println("");
  
  
  q15_t *FFTResults = magFFT(samplesFiltered);

  for (int i = 0; i < SAMPLE_LENGTH; i++)
  {
    Serial.print(FFTResults[i]); Serial.print(", ");
  }
  
  
  Serial.println("");
  Serial.println("=========================================================================================");
  Serial.println("");
  
  int16_t countTest = 0;
  
  q31_t **peaks = peakDetection(FFTResults, countTest);

  
  int lengthOfPeakArray = peaks[0][1];
  
  Serial.println(lengthOfPeakArray);

  // Since we are sotring the length of the array in the first index, we do not start from 0 in the array when printing out.
  // Find out how to get length of a 2D array of a q31_t datatype. For now we return the length of the array in the first index of 2D array, 
  // This must be solved, this is not a good solution. 
  for (int i = 1; i < lengthOfPeakArray; i++)
  {
    Serial.print("["); Serial.print(peaks[i][0]); Serial.print(", "); Serial.print(peaks[i][1]); Serial.println("],");
  }
  

  endTime= micros();
  timeDiff = endTime - startTime;
  Serial.print("StartTime: "); Serial.println(startTime);
  Serial.print("EndTime: "); Serial.println(endTime);
  Serial.print("Time: "); Serial.println(timeDiff); //Just printing the time it takes for the script to run. The printing and loops associated
  //take time, with all of it it takes around 1700 microseconds

  
}

void loop() {}
