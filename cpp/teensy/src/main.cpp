#include <Arduino.h>
#include "arm_math.h"
#include "arm_const_structs.h"
#define SAMPLE_RATE 500000
#define SAMPLE_LENGTH 1024
#define BITSHiFT 9
#define SCALE_FACTOR 1000.0

int16_t samples[SAMPLE_LENGTH] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 50, 75, 98, 120, 140, 157, 172, 185, 194, 201, 204, 204, 201, 194, 185, 172, 157, 140, 120, 98, 75, 50, 25, 0, -26, -51, -76, -99, -121, -141, -158, -173, -186, -195, -202, -205, -205, -202, -195, -186, -173, -158, -141, -121, -99, -76, -51, -26, 0, 25, 50, 75, 98, 120, 140, 157, 172, 185, 194, 201, 204, 204, 201, 194, 185, 172, 157, 140, 120, 98, 75, 50, 25, 0, -26, -51, -76, -99, -121, -141, -158, -173, -186, -195, -202, -205, -205, -202, -195, -186, -173, -158, -141, -121, -99, -76, -51, -26, 0, 58, 116, 171, 223, 269, 310, 344, 370, 389, 399, 400, 393, 378, 355, 325, 288, 245, 198, 147, 94, 40, -15, -68, -119, -166, -209, -247, -279, -304, -322, -333, -336, -333, -322, -305, -282, -253, -220, -184, -144, -103, -61, -20, 20, 59, 94, 126, 153, 176, 194, 207, 215, 217, 214, 207, 196, 180, 162, 141, 119, 95, 71, 48, 25, 4, -15, -32, -46, -57, -65, -70, -73, -72, -69, -64, -57, -49, -40, -31, -22, -14, -7, -2, 2, 3, 2, -1, -6, -13, -22, -33, -45, -57, -70, -82, -94, -104, -112, -19, 52, 84, 69, 11, -72, -159, -223, -244, -214, -132, -14, 117, 237, 321, 356, 339, 281, 200, 122, 68, 56, 88, 157, 244, 326, 377, 380, 328, 225, 89, -56, -184, -275, -315, -305, -259, -197, -142, -118, -135, -195, -287, -390, -479, -531, -528, -468, -359, -219, -73, 52, 138, 175, 167, 129, 83, 52, 57, 106, 197, 316, 440, 543, 603, 606, 550, 448, 318, 188, 81, 14, -7, 12, 53, 93, 109, 84, 11, -103, -242, -382, -495, -563, -573, -526, -437, -326, -221, -143, -106, -113, -154, -209, -255, -270, -238, -156, -32, 113, 254, 367, 432, 441, 397, 317, 224, 143, 94, 90, 127, 194, 270, 329, 350, 322, 242, 124, -13, -141, -238, -286, -279, -227, -145, -59, 7, 34, 16, -45, -132, -222, -291, -319, -295, -223, -116, 4, 110, 179, 199, 167, 93, -1, -92, -156, -176, -148, -78, 14, 106, 172, 196, 170, 99, -1, -105, -188, -230, -220, -159, -61, 52, 155, 224, 247, 222, 157, 74, -4, -53, -59, -16, 66, 169, 268, 338, 361, 329, 247, 131, 5, -106, -181, -209, -190, -136, -71, -16, 5, -18, -88, -193, -311, -417, -487, -505, -465, -376, -256, -130, -22, 48, 72, 53, 8, -43, -74, -67, -12, 88, 219, 357, 477, 555, 577, 542, 460, 351, 240, 151, 101, 94, 124, 173, 218, 236, 209, 131, 9, -142, -295, -425, -510, -540, -513, -444, -355, -269, -209, -189, -210, -263, -328, -380, -397, -364, -277, -146, 9, 164, 293, 375, 403, 379, 320, 248, 187, 157, 169, 222, 301, 386, 452, 476, 448, 365, 240, 93, -48, -160, -225, -237, -204, -143, -78, -32, -24, -60, -136, -236, -336, -412, -444, -422, -346, -233, -105, 13, 97, 134, 120, 67, -8, -78, -121, -122, -76, 10, 116, 218, 293, 321, 297, 223, 119, 6, -89, -145, -151, -108, -30, 63, 145, 194, 198, 154, 73, -25, -114, -172, -183, -143, -60, 48, 155, 236, 272, 256, 192, 95, -11, -101, -156, -164, -126, -56, 25, 91, 122, 105, 38, -67, -189, -302, -382, -412, -388, -317, -216, -109, -22, 27, 31, -6, -69, -135, -179, -182, -134, -38, 92, 234, 360, 447, 482, 462, 397, 306, 215, 147, 117, 130, 179, 246, 307, 338, 322, 252, 134, -15, -171, -306, -400, -441, -429, -377, -305, -239, -200, -200, -242, -314, -397, -465, -496, -474, -397, -271, -117, 39, 172, 263, 301, 292, 248, 194, 152, 143, 175, 248, 348, 451, 534, 573, 556, 483, 363, 220, 78, -38, -110, -133, -113, -68, -20, 7, -5, -62, -158, -278, -397, -491, -538, -528, -462, -356, -231, -113, -25, 17, 13, -28, -87, -140, -165, -146, -79, 27, 153, 275, 367, 411, 400, 337, 240, 132, 38, -21, -33, 1, 68, 146, 212, 243, 226, 162, 60, -58, -167, -243, -270, -243, -171, -72, 30, 109, 147, 136, 80, -5, -98, -172, -208, -197, -138, -48, 53, 140, 189, 188, 135, 42, -70, -178, -255, -287, -267, -203, -112, -19, 52, 84, 69, 11, -72, -159, -223, -244, -214, -132, -14, 117, 237, 321, 356, 339, 281, 200, 122, 68, 56, 88, 157, 244, 326, 377, 380, 328, 225, 89, -56, -184, -275, -315, -305, -259, -197, -142, -118, -135, -195, -287, -390, -479, -531, -528, -468, -359, -219, -73, 52, 138, 175, 167, 129, 83, 52, 57, 106, 197, 316, 440, 543, 603, 606, 550, 448, 318, 188, 81, 14, -7, 12, 53, 93, 109, 84, 11, -103, -242, -382, -495, -563, -573, -526, -437, -326, -221, -143, -106, -113, -154, -209, -255, -270, -238, -156, -32, 113, 254, 367, 432, 441, 397, 317, 224, 143, 94, 90, 127, 194, 270, 329, 350, 322, 242, 124, -13, -141, -238, -286, -279, -227, -145, -59, 7, 34, 16, -45, -132, -222, -291, -319, -295, -223, -116, 4, 110, 179, 199, 167, 93, -1, -92, -156, -176, -148, -78, 14, 106, 172, 196, 170, 99, -1, -105, -188, -230, -220, -159, -61, 52, 155, 224, 247, 222, 157, 74, -4, -53, -59, -16, 66, 169, 268, 338, 361, 329, 247, 131, 5, -106, -181, -209, -190, -136, -71, -16, 5, -18, -88, -193, -311, -417, -487, -505, -465, -376, -256, -130, -22, 48, 72, 53, 8, -43, -74, -67, -12, 88, 219, 357, 477, 555, 577, 542, 460, 351, 240, 151, 101, 94, 124, 173
};





//int16_t samples[SAMPLE_LENGTH];
int16_t samplesScaled[SAMPLE_LENGTH];
int16_t results[2*SAMPLE_LENGTH]; //To store the results of fft with complex numbers, need to have double the size of the sample length z = a + bi, {a1, b1, a2, b2, a3, b3 ... }
uint32_t ifftFlag = 0;
uint32_t doBitReverse = 1;
arm_rfft_instance_q15 fft_instance;
int16_t results_mag[SAMPLE_LENGTH]; //



void setup() {
  Serial.begin(9600); // Initialize the FFT

  arm_rfft_init_q15(&fft_instance, SAMPLE_LENGTH, ifftFlag, doBitReverse); // Generate imperfect sinusoidal signal at 30kHz
  Serial.println("rfft initialized");
  
  arm_scale_q15(samples, SCALE_FACTOR, BITSHiFT, samplesScaled, SAMPLE_LENGTH); //Scale samples

  
  
  Serial.println("Made samples"); //For troubleshooting
  
  arm_rfft_q15(&fft_instance, samplesScaled, results); // The result of the FFT is stored in the results array
  Serial.println("Results created");
  
  // Use the magnitude function to compute the magnitude of the complex result
  arm_cmplx_mag_q15(results, results_mag, SAMPLE_LENGTH); // Convert the magnitude to dB and store in the samples array

  Serial.println("fft output"); //Printing the fft output for a better understanding of what is going on
  for(int i = 0; i < SAMPLE_LENGTH; i++){
    Serial.print(results_mag[i]);
    if(i < (SAMPLE_LENGTH - 1)){
      Serial.print(", ");
    } else{
      Serial.println("");
    }
  }

  Serial.print("Frequencies: ");
  for (int i = 0; i < SAMPLE_LENGTH/2; i++)
  {
    if(results_mag[i] > 0){
        float total_amp = results_mag[i] + results_mag[i+1]; //Calculate total amplitude of neighboring non-zero indexes.
        float prop1 = results_mag[i]/total_amp; //Calculate proportion of index 1 amplitude to total amplitude
        float prop2 = results_mag[i+1]/total_amp; //Ditto for index 2
        float temp_freq = (float)(prop1*i * SAMPLE_RATE / SAMPLE_LENGTH) + (float)(prop2*(i+1) * SAMPLE_RATE / SAMPLE_LENGTH); //We use the proportions instead of the straight average of 2s
        Serial.print(temp_freq); 
        Serial.print(", ");
        i++;
    }
  }
  Serial.println("");

}

void loop() {}