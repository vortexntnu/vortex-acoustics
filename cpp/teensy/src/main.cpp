#include <Arduino.h>
#include "arm_math.h"
#include "arm_const_structs.h"
#define SAMPLE_RATE 510000
#define SAMPLE_LENGTH 1024
#define BITSHiFT 9
#define SCALE_FACTOR 1000.0

int16_t samples_raw[SAMPLE_LENGTH] = {
3276, 1192, -3276, 1333, 3276, -3276, 2066, -3276, -3276, -3262, 3276, 2179, -3276, 450, -3276, -3276, -3276, 3276, -955, -20, -2809, 1234, -3276, -3276, 3276, -2584, 3276, -2215, -2184, -3276, -64, 3276, -3276, -3276, -3276, 3276, -1169, -891, -3276, 1017, 3276, 3276, 3276, 1230, -3276, -602, 3128, 3276, -1933, -1265, -1468, 3276, -1013, 7138, 5966, 2002, 618, -2583, 2868, -3799, 2298, 534, 3796, 9182, 9828, 9223, 4036, 5534, -2874, 2642, 2714, 823, 4427, 6793, 889, 402, -1181, 3115, -834, -980, -1284, -655, -5191, 1797, -3014, 3697, 2747, -2289, -3685, -9214, -3436, -9209, -1034, -3573, -1552, 4032, 3016, -3584, 1404, -23, -7238, -6769, -5202, -2600, 17, 6666, 4667, 3660, 1317, 6452, 5467, 4487, -140, 4093, 3673, 8537, 9296, 11528, 3166, 827, -190, -2754, -1282, 4144, 5346, 519, 4653, 5942, -2496, -3824, -5797, -4753, -3749, -9398, -8590, -4822, -5135, 793, -6473, -8101, -9428, -7530, -5188, -10884, -8967, -6520, 2315, -2734, 2214, -2945, 2427, -5213, 973, 572, 3501, 2806, 5660, 10242, 7835, 10379, 2395, 1426, 5913, 4976, -404, 5591, 9334, 4066, 10651, 8972, 1438, -1070, -3409, -4960, -2575, -150, -1219, 3996, 4595, -2570, -4244, -27, -8927, -10607, -4605, -3937, -8920, -7051, -2613, -3073, -5209, -6827, -2477, -5145, -9894, -8930, -374, 2145, -2063, -518, 6445, 5787, -2052, -3309, -3899, -2908, -898, 1703, 10774, 9396, 6427, 5537, 6292, 7802, 5738, 1761, 4377, 5109, -349, 459, 6998, 5930, 3978, -4896, -354, -1452, -3964, -58, 1864, -505, 4923, 1371, 3794, -248, -3160, -1976, -2639, -2189, -4865, -5889, 889, 2165, 1454, -6589, -8290, -9509, -4020, -8218, -6271, -3409, 5877, 3787, 8579, 8177, 458, -839, 4913, 1522, 4728, 3985, 3828, 8626, 7972, 8316, 4512, 3443, 1389, -4473, -3635, 317, 3818, 2723, -250, 2763, -799, 3039, -499, 447, -5067, 235, 2321, -1826, 5462, -1509, -3003, -5279, -1297, -3103, -10324, -3678, -3896, -5998, 2378, -3150, -3145, -3435, -5150, -3029, 550, -4904, -2875, -436, 2589, 9479, 2849, 3731, 10195, 7481, 2669, 4356, 9808, 6869, 4346, 4346, 2348, 4125, 99, -2110, -9341, -10512, -12941, -11142, -8343, 1246, 3811, -1085, 3537, 4436, 2461, 6382, 7233, 2022, 3415, 4230, 3885, 6972, -1126, -2498, -9265, -6002, -14109, -8596, -8830, -10069, -1699, 489, -4592, -551, -406, -2688, 3535, 4878, 9509, 5328, 11096, 7098, 12132, 9052, 1336, 523, -2813, -9067, -11300, -5087, -10175, -8533, -2617, -6456, -6077, 889, -2060, 3703, 6492, 8245, 13105, 15383, 16273, 11255, 12497, 8647, -2047, -3466, -7061, -9415, -4798, -9202, -8801, -2217, -2618, -8106, -7846, -8466, -7229, 2459, 989, 10147, 6537, 9102, 8498, 11817, 8512, 5, 933, -719, -2050, -7860, -2922, -9960, -10886, -5791, -6824, -13911, -13192, -4357, -6547, -1543, 2259, 6236, 15283, 15990, 15063, 12825, 10608, 2597, 6566, 5933, 1004, 4242, 1926, 979, -2621, -4126, -12406, -6162, -4735, -8249, -4154, 3272, 6464, 12683, 13411, 10477, 4533, 5702, 6479, 6305, 2430, 346, 2936, 973, -2179, -10894, -9426, -18588, -13019, -18599, -15799, -11736, -681, -497, -57, 1777, 3829, 9260, 2800, 3206, 3994, 4890, 5381, 4926, 3181, 172, 689, -4463, -5269, -12259, -10228, -10075, -6960, -3452, 6243, 4110, 9754, 3666, 10363, 8083, 11370, 10945, 6878, 13767, 6303, 3818, 6393, 1436, -10227, -11702, -16064, -16874, -14488, -9560, -13790, -5057, -6248, -8863, -6643, -3813, 1314, -844, 3321, 7110, 8449, 13134, 12337, 9119, 70, 383, -1001, -5461, -10343, -3059, -6238, -5405, -4310, -3540, 3614, 4179, 5207, 523, 3320, 13205, 16482, 17040, 19714, 18121, 15696, 11482, 234, -4099, -7182, -9558, -7587, -4449, -4771, -11952, -11894, -14103, -8293, -10303, -11761, -6012, 189, 4233, 1079, 3114, 3416, 2078, 6160, 3303, -5748, -7380, -4755, -7175, -7475, -1666, -7619, -6627, -9361, -9788, -9120, -6994, 2617, 7607, 5723, 16234, 18763, 15237, 15963, 14107, 7350, 7575, 9650, 3204, 924, -193, 4307, -4343, -7641, -4349, -13543, -8337, -8000, -6015, -7631, 700, 3806, -755, 4238, -848, 4251, -3891, -5069, -5573, 1049, -1003, -3306, -2893, -1618, -6574, -13250, -15112, -10009, -9017, -11363, -4766, 3793, 1281, 10808, 9558, 6454, 12880, 6113, 12800, 6853, 14253, 11733, 14588, 9484, 7178, -9, -4025, -926, -5216, -10211, -5281, -1221, 1882, 3913, 3264, -1410, -2081, 3540, -1948, 1759, 1697, 4532, 5251, -1449, -2856, -2718, -7393, -6221, -10125, -12218, -15584, -9060, -12876, -9791, -6700, -5053, 2090, -3046, 2768, 5226, 6730, 8192, 5846, 14591, 10085, 15084, 7112, 3279, -241, -2233, 1355, -5703, -4955, -435, 4020, 3742, 5563, 5477, -1882, 4092, -2334, -1311, 417, 2318, 5314, 8899, 2471, -373, -4192, -2874, -8506, -13805, -14554, -7510, -7204, -11551, -6579, -3839, -8990, -4146, -10255, -7667, -6226, -2840, 5750, 3694, 11945, 12023, 10576, 8109, -1176, 2753, -4638, 672, 2678, 3868, 4458, 5134, -1846, 3823, -1881, -3655, 3846, -635, 2190, 10352, 11862, 10633, 7234, 9110, 1550, 1938, -3202, -1860, -2610, -8150, -1546, -8341, -8904, -4068, -5685, -6882, -13609, -12391, -6024, -4204, 3950, 3893, 8774, 2437, 4603, 2932, -2848, -2522, 1389, -5017, -4072, -3785, -3740, 1198, -2594, -848, -6023, -1847, -355, -3303, 6188, 9957, 6422, 11670, 12050, 8914, 9741, 9049, 7249, -385, -847, -1099, -1675, 3553, 1352, -6900, -10863, -13005, -13808, -12957, -4024, -656, -942, 1165, 1058, 3618, 3396, 3513, 3559, 2307, 581, 4260, -1941, 4390, -3344, -5529, -8365, -4631, -6655, -7247, -12646, -9999, -2543, 4042, 7280, 2849, 3731, 3641, 9655, 2669, 9264, 7839, 10535, 4346, 10342, 8527, 5494, 1697, -8664, -6684, -13171, -6387, -8275, -1789, -5306, 3811, 5467, 4815, 6217, 6127, 1163, 7233, 2022, 9968, 8323, 3885, 2066, 5427, -5171, -9265, -8798, -13140, -7975, -6600, -10824, -4652, -5950, 861, -1627, -3333, 3864, 733, 508, 9509, 5328, 10947, 7098, 12132, 9052, 4976, -5816, -2958, -11600, -12291, -5087, -3622, -8533, -7224, 97, 475, -5059, 1433, 3703, 4620, 9851, 6552, 15464, 9720, 8678, 9070, 8647, -409, 889, -1626, -2861, -3665, -7567, -4241, -8770, -4230, -9720, -9901, -5570, -675, -4094, -232, 10147, 6537, 12199, 11378, 11817, 2239, 4863, 1621, -719, -2050, -5136, -4761, -9960, -4935, -5612, -6824, -7358, -13192, -10911, -7172, -2506, 8812, 6236, 15283, 11194, 15063, 13032, 4054, 1941, 6872, -620, 4695, -2072, -3465, -2756, -1610, -4126, -12406, -6401, -11288, -1695, 2399, 5817, 3805, 6129, 13411, 12711, 4533, 6775, 7500, -247, -1079, 4609, 3226, 13, -8439, -12426, -9426, -14622, -13019, -18121, -10604, -9907, -681, -1302, 6496, 1777, 9098, 2707, 4624, 3206, 10547, 11443, 11935, 6404, 3745, 1756, -3659, -1003, -4856, -5706, -5469, -5272, -3691, -3452, 6243, 8506, 9754, 10219, 3809, 9539, 4817, 12430, 11238, 13767, 12857, 10371, -160, 627, -4445, -14433, -10928, -13787, -17935, -16113, -8831, -5236, -3407, -2309, -8012, -387, 1314, 3794, 6832, 3320, 12194, 13134, 12337, 3328
};
int16_t samples[SAMPLE_LENGTH];

//int16_t samples[SAMPLE_LENGTH];
int16_t resultsRaw[2*SAMPLE_LENGTH]; //To store the results of fft with complex numbers, need to have double the size of the sample length z = a + bi, {a1, b1, a2, b2, a3, b3 ... }
uint32_t ifftFlag = 0;
uint32_t doBitReverse = 1;
arm_rfft_instance_q15 fft_instance;
int16_t results[SAMPLE_LENGTH]; //


void setup() {
Serial.begin(9600); // Initialize the FFT
Serial.println("Serial output begun");

int fOrder = 9;

//Coefficients found at https://www.meme.net.au/butterworth.html, put 9th order filter, 510kHz sampling rate and 50kHz cut-off
float32_t aFilterCoeffs[fOrder] = {
  5.4569203401896500,
  -13.7047980216478000,
  20.6476635308150000,
  -20.4748421533297000,
  13.8143215886326000,
  -6.3261752484730100,
  1.8924462642157100,
  -0.3350397779275800,
  0.0267111235596287
};

float32_t bFilterCoeffs[fOrder + 1] = {
  0.00000545381633879714,
  0.00004908434704917420,
  0.00019633738819669700,
  0.00045812057245895900,
  0.00068718085868843900,
  0.00068718085868843900,
  0.00045812057245895900,
  0.00019633738819669700,
  0.00004908434704917420,
  0.00000545381633879714
};


/*
  Implement Buterwirth filter of "fOrder"
  y = (a_1 * y_1 + .... + a_n * y_n) + (b_1 * x_1 + ... b_m * x_m)
  Se Wiki: [Wiki Page]
  Se source: https://www.meme.net.au/butterworth.html
*/

//Iterate through each index of the raw samples, and apply filtering to them. Starting at fOrder because we can't use an index outside of the samples array
for (int i = fOrder; i < SAMPLE_LENGTH + fOrder; i++)
{
  float32_t output_influence = 0;
  for (int k = 0; k < fOrder; k++)
  {
    output_influence += aFilterCoeffs[k]*samples[i-(k+1)];
  }

  float32_t input_influence = 0;
  for (int k = 0; k < fOrder + 1; k++)
  {
    input_influence += bFilterCoeffs[k]*samples_raw[i-k];
  }

  samples[i] = (int16_t)(output_influence + input_influence);
  
  Serial.print(samples[i]); Serial.print(", ");
}
Serial.println("Filtered");


arm_rfft_init_q15(&fft_instance, SAMPLE_LENGTH, ifftFlag, doBitReverse);
Serial.println("rfft initialized");
arm_scale_q15(samples, SCALE_FACTOR, BITSHiFT, samples, SAMPLE_LENGTH); //Scale samples

Serial.println("Made samples"); //For troubleshooting
arm_rfft_q15(&fft_instance, samples, resultsRaw); // The result of the FFT is stored in the results array
Serial.println("Results created");
// Use the magnitude function to compute the magnitude of the complex result
arm_cmplx_mag_q15(resultsRaw, results, SAMPLE_LENGTH); // Convert the magnitude to dB and store in the samples array

Serial.println("fft output"); //Printing the fft output for a better understanding of what is going on
for(int i = 0; i < SAMPLE_LENGTH; i++){
Serial.print(results[i]);
if(i < (SAMPLE_LENGTH - 1)){
Serial.print(", ");
} else{
Serial.println("");
}
}

Serial.print("Frequencies: ");
for (int i = 0; i < SAMPLE_LENGTH/2; i++)
{
if(results[i] > 0){
float total_amp = results[i] + results[i+1]; //Calculate total amplitude of neighboring non-zero indexes.
float prop1 = results[i]/total_amp; //Calculate proportion of index 1 amplitude to total amplitude
float prop2 = results[i+1]/total_amp; //Ditto for index 2
float temp_freq = (float)(prop1*i * SAMPLE_RATE / SAMPLE_LENGTH) + (float)(prop2*(i+1) * SAMPLE_RATE / SAMPLE_LENGTH); //We use the proportions instead of the straight average of 2s
Serial.print(temp_freq); 
Serial.print(", ");
i++;
}
}
Serial.println("");

}

void loop() {}
