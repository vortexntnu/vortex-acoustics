#include <Arduino.h>
#include "arm_math.h"
#include "arm_const_structs.h"
#define SAMPLE_RATE 500000
#define SIGNAL_FREQUENCY 50000
#define SAMPLE_LENGTH 1024
#define BITSHiFT 9
#define SCALE_FACTOR 100.0

int16_t samples[SAMPLE_LENGTH] = {
0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752, 1083, 0, -1084, -1753, -1753, -1084, 0, 1083, 1752, 1752
};





//int16_t samples[SAMPLE_LENGTH];
int16_t samplesScaled[SAMPLE_LENGTH];
int16_t results[2*SAMPLE_LENGTH]; //To store the results of fft with complex numbers, need to have double the size of the sample length z = a + bi, {a1, b1, a2, b2, a3, b3 ... }
uint32_t ifftFlag = 0;
uint32_t doBitReverse = 1;
arm_rfft_instance_q15 fft_instance;
int16_t results_mag[SAMPLE_LENGTH]; //
q63_t samples_mag[SAMPLE_LENGTH]; 



void setup() {
  Serial.begin(9600); // Initialize the FFT

  arm_rfft_init_q15(&fft_instance, SAMPLE_LENGTH, ifftFlag, doBitReverse); // Generate imperfect sinusoidal signal at 30kHz
  Serial.println("rfft initialized");
  
  arm_scale_q15(samples, SCALE_FACTOR, BITSHiFT, samplesScaled, SAMPLE_LENGTH); //Scale samples

  
  
  Serial.println("Made samples"); //For troubleshooting
  
  arm_rfft_q15(&fft_instance, samplesScaled, results); // The result of the FFT is stored in the results array
  Serial.println("Results created");
  
  // Use the magnitude function to compute the magnitude of the complex result
  arm_cmplx_mag_q15(results, results_mag, SAMPLE_LENGTH); // Convert the magnitude to dB and store in the samples array
  

  q15_t max_mag; //For maximum amplitude of signal

  uint32_t max_mag_index;
  uint32_t max_left_index;
  uint32_t max_right_index;
  float frequency_avg;



  Serial.println("fft output"); //Printing the fft output for a better understanding of what is going on
  for(int i = 0; i < SAMPLE_LENGTH; i++){
    Serial.print(results_mag[i]);
    if(i < (SAMPLE_LENGTH - 1)){
      Serial.print(", ");
    } else{
      Serial.println("");
    }
  }
  
  arm_max_q15(results_mag, SAMPLE_LENGTH, &max_mag, &max_mag_index);
  max_left_index = max_mag_index - 1;
  max_right_index = max_mag_index + 1;
  Serial.print("Max mag index: "); Serial.println(max_mag_index);


  float frequency = (float)(max_mag_index * SAMPLE_RATE / SAMPLE_LENGTH);
  if(results_mag[max_left_index] != 0){ //Since there may be instances where we get a non-zero output on either side of the max value, we check either side for a value and take the average frequency, 
  //for example a 50kHz sample is 49.8kHz if only taking max value, but 50.05 if taking that average
    frequency_avg =  ((float)(max_mag_index * SAMPLE_RATE / SAMPLE_LENGTH) +(float)(max_left_index * SAMPLE_RATE / SAMPLE_LENGTH)) / 2;

  }
  else if(results_mag[max_right_index] != 0){
    frequency_avg =  ((float)(max_mag_index * SAMPLE_RATE / SAMPLE_LENGTH) +(float)(max_right_index * SAMPLE_RATE / SAMPLE_LENGTH)) / 2;
  }
  else{
    frequency_avg = frequency;
  }

  Serial.print("Frequency: ");
  Serial.println(frequency);
  Serial.print("Frequency avg: ");
  Serial.print(frequency_avg);
  Serial.print(" Hz ");
  Serial.print("Amplitude : ");
  Serial.println(max_mag);
}

void loop() {}
