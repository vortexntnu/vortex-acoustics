#include "DSP.h"
#include "arm_const_structs.h"
#include "arm_math.h"
#include <Arduino.h>

/*These are just to measure the time it takes to run the entire code.
Without all the Serial prints we go down to 666 microseconds.*/
unsigned long timeDiff;
unsigned long startTime;
unsigned long endTime;

int16_t samplesRaw[SAMPLE_LENGTH] = {
    280, 1183, -445, -1578, 1851, 293, 1681, -260, 1455, 1000, 94, 1847, -602, 702, 218, -341, 673, -815, -474, -505, -4, -151, -560, 886, 531, 718, 179, 505, 1447, 708, -411, -957, 324, -425, -1074, -1333, -1090, 1106, -302, 1044, -438, -609, -132, 861, 85, -870, -790, 1663, -285, 223, 2509, 1113, 1282, 3035, 4077, 3407, 2773, 2774, -1874, -209, 537, 3248, 3895, 6200, 6919, 6512, 3976, 192, -188, -1846, -245, 3315, 3213, 3046, 4638, 1974, 1701, -1985, -3630, -6087, -5875, -1284, -1524, -479, 1035, 1293, -1289, -4392, -5959, -7328, -5868, -3957, -2986, 574, -1524, 40, -631, -1249, -2557, -5582, -5016, -1778, -280, 2065, 4480, 5923, 4906, 2664, 3199, -558, 3728, 2660, 5335, 8348, 7667, 8238, 7417, 4913, 2237, 1715, 1415, 1867, 3110, 3987, 3227, 3240, 3298, 117, -3503, -5134, -4766, -5978, -8890, -3607, -4000, -1205, -1495, -2394, -6821, -8028, -10899, -7530, -6472, -1556, -2247, 607, 306, -1195, -2865, -2258, -3198, -2942, -712, 2757, 2905, 6698, 5599, 5757, 4753, 4246, 470, 2475, 3226, 4716, 5822, 9153, 7420, 6400, 6528, 513, -1263, -1421, -559, 405, 3215, 2607, 3467, 1324, -585, -5648, -4184, -9149, -4622, -5722, -4482, -4303, -1742, -3189, -4167, -6738, -7292, -6643, -7527, -5386, -3280, -602, 913, 2548, 2810, -2113, -1874, -2995, -2969, -427, 1515, 6687, 8322, 9533, 7592, 4965, 4545, 1606, 1820, 3533, 5185, 6286, 6882, 5256, 4931, -969, -2913, -3421, -3325, -2019, 536, -352, 2386, 2972, 1308, 332, -578, -4415, -3027, -3561, -4149, -885, -796, -523, -239, -1228, -3627, -7892, -7117, -8987, -3576, -3887, -1316, -127, 942, 2631, 131, -1277, -714, 986, 1195, 5713, 7186, 7120, 7139, 5931, 5516, 2456, 1041, -682, -266, 2337, 3657, 3662, 2716, 1666, -273, -3055, -1467, -1278, -1713, 911, 1884, 2861, 3413, 4139, 1343, -383, -3865, -5456, -5539, -3917, -1661, 834, 45, -1427, -4068, -7578, -7607, -6689, -3954, -1903, -406, 3343, 2201, 3694, 2490, 2115, 475, -264, 2259, 3152, 9058, 11416, 13209, 13800, 11882, 7134, 4502, 370, -563, -1463, -3052, -40, -2701, -3449, -3822, -6656, -6775, -6927, -7709, -3521, 423, 5115, 8650, 10873, 10381, 8913, 4562, 3104, 2496, -2746, -909, -1953, -1416, -3058, -4654, -7082, -9771, -10527, -12009, -11296, -5720, -582, 1122, 6523, 7342, 10220, 9918, 6765, 3819, 2514, 2814, 4031, 2339, 2455, -390, -3475, -6718, -9170, -10081, -10812, -10035, -5654, -478, 1063, 6036, 7046, 7898, 6188, 5313, 5634, 4460, 8161, 9605, 8351, 5427, 4948, 364, -5354, -6916, -12149, -10503, -9365, -7023, -3776, -2968, 507, -164, 1842, 1861, 2094, 5086, 5832, 9959, 7382, 8887, 7008, 3405, -3003, -4898, -8508, -8815, -13333, -11006, -8492, -7830, -5069, -5528, -3654, -3209, -3687, -631, 3995, 8936, 10429, 12899, 13067, 14012, 9713, 3461, 2139, -898, -4262, -4280, -4770, -3516, -4141, -5856, -3242, -6706, -6100, -3895, -1183, 4035, 4990, 10668, 10327, 11506, 11095, 8121, 4785, 1180, -4328, -5438, -4966, -6882, -6718, -10490, -11713, -10927, -13557, -13378, -12879, -5757, -331, 2813, 7318, 7060, 11618, 10310, 7669, 5209, 4175, 5475, 2949, 3912, 4433, 2036, -410, -3796, -6075, -7928, -8315, -5114, -3042, -212, 5615, 6636, 10346, 9493, 10200, 9900, 8956, 7430, 8496, 8387, 5727, 5447, 1781, -5014, -7389, -12914, -17001, -16734, -15398, -13100, -8383, -7019, -5416, -3033, -2556, -417, -32, 3967, 3194, 4828, 8750, 9514, 7806, 5896, 1082, -3000, -5658, -7173, -6824, -5913, -5519, -2163, 2970, 290, 894, 3733, 2999, 6293, 9344, 11992, 13716, 16926, 16829, 13722, 9818, 6554, -1920, -3682, -7820, -7102, -8333, -8272, -6206, -11972, -8937, -10218, -11041, -10269, -7177, -2526, 76, 3878, 7287, 6677, 6802, 3156, -664, -1301, -3993, -4902, -3453, -3971, -3910, -3675, -5312, -5210, -5923, -6200, -3022, 1243, 4834, 8924, 13235, 16689, 17565, 13213, 9511, 11499, 9451, 6722, 5173, 5007, 4662, 1370, -3171, -5845, -9259, -11907, -10645, -9806, -7235, -3247, -89, 912, 77, 3028, -391, -732, -630, -2237, -746, -711, -2696, -393, -953, -6850, -10290, -11939, -11174, -12360, -10726, -5943, -2608, 431, 4084, 7378, 8264, 8334, 9038, 9960, 10695, 12289, 13042, 10889, 12425, 10474, 3519, -1680, -3794, -4347, -6355, -4348, -2044, -2956, 112, 392, -764, -1729, -1551, -1387, 13, 2375, 3772, 4082, 4056, 3258, -1893, -5299, -8486, -11479, -13087, -11916, -12937, -10036, -5994, -4803, -5274, -6014, -3352, -2018, -908, 3675, 6171, 8530, 10868, 11765, 11513, 10259, 5883, 2528, 118, -1073, 1806, 1466, 1101, 1987, 512, 634, -2840, -1567, -992, 1708, 3714, 6037, 9281, 8049, 6485, 2588, 2497, -978, -4904, -5186, -7413, -6637, -4135, -7412, -7173, -10284, -13332, -12894, -12346, -8286, -4894, -573, 1695, 4344, 6476, 5936, 5589, 4291, 1483, 1990, 2897, 3055, 4312, 3752, 1972, 1254, -2168, -2153, -3857, -3449, -560, 1804, 6096, 8034, 8679, 8289, 9197, 6116, 3749, 3887, 1924, 2458, 1390, 2535, 699, -1716, -7051, -11454, -12082, -12527, -12098, -9190, -5941, -4064, -208, 1367, -22, -97, -501, -2807, 2584, 1978, 3892, 3957, 4277, 1979, 1862, -1370, -7261, -7237, -7603, -5325, -1955, 43, 1339, 5145, 5376, 6613, 5485, 5006, 6345, 6779, 7823, 8813, 11425, 8019, 5964, 1521, -3299, -5615, -9391, -8621, -9134, -8502, -4038, -3139, -4149, -3128, -2781, -2894, -2427, -651, 2271, 4637, 6802, 8117, 7341, 2741, 26, -3298, -5799, -7747, -7765, -5469, -3668, -3749, -5483, -4266, -1976, -4027, -2413, -1236, 4057, 6252, 10350, 12084, 10826, 11079, 9065, 3721, -150, -2554, -3200, -1210, -3341, -1685, -3883, -6183, -5338, -5423, -7022, -7090, -3211, 1411, 4228, 8221, 11553, 9235, 8393, 5732, 3536, -217, -760, -1996, -1175, -628, -3134, -4506, -6964, -10609, -10753, -11860, -9423, -5832, -1970, 3146, 5600, 8071, 8439, 5172, 5823, 5359, 4713, 4495, 3199, 4143, 2876, -1018, -5034, -5326, -8983, -11597, -11820, -11409, -4212, -2944, 1615, 5097, 6657, 5681, 6312, 6410, 4796, 6813, 9360, 8189, 8146, 7668, 3611, -870, -5166, -9216, -10988, -11357, -8154, -8139, -5067, -2431, 44, 1213, 3405, 3958, 3359, 2880, 6670, 8171, 11325, 7557, 6442, 3205, -1950, -4190, -10189, -11374, -10765, -8967, -11146, -7936, -4658, -4612, -2785, -1890, -2043, 1885, 6422, 10037, 12312, 14050, 15976, 12153, 8912, 4415, 835, -2900, -1232, -3171, -4135, -6291, -3685, -6619, -4130, -4045, -4750, -3431, 17, 1292, 6448, 11309, 12644, 12383, 10934, 7036, 4096, 1201, -2972, -4435, -5431, -6109, -6675, -8527, -11063, -14037, -14081, -14785, -11001, -7788, -5207, 2631, 5563, 9886, 10584, 7654, 7973, 4914, 3171, 5877, 5392, 4006, 5461, 1885, -1134, -6233, -8785, -7041, -9412, -8886, -3505, 2046, 6025, 7113, 10381, 11107, 8778, 8574, 7345, 8213, 7593, 10205, 3998, 4215, 150, -3428, -8198, -11160, -17168, -17432, -17503, -12917, -7873, -7092, -3721, -1720, 217, -442, -158, 2608, 5966, 5525, 8512, 9722, 7966
};

void setup() {
  Serial.begin(9600);
  delay(3000);
  Serial.println("Test");

  startTime = micros();

  Serial.println("");
  Serial.println(
      "============================================================="
      "========================");
  Serial.println("Filtered samples");
  
  q15_t* samplesFiltered = filter_butterwort_9th_order_50kHz(samplesRaw);

  for (int i = 0; i < SAMPLE_LENGTH; i++) {
      Serial.print(samplesFiltered[i]);
      Serial.print(", ");
  }

  
  Serial.println("");
  Serial.println(
      "============================================================="
      "========================");
  Serial.println("FFT");
  

  q15_t* FFTResultsRaw = FFT_raw(samplesFiltered);
  q15_t* FFTResults = FFT_mag(FFTResultsRaw);

  for (int i = 0; i < SAMPLE_LENGTH; i++) {
      Serial.print(FFTResults[i]);
      Serial.print(", ");
  }

  Serial.println("");
  Serial.println(
      "============================================================="
      "=======================");
  Serial.println("Peaks");

  q31_t** peaks = peak_detection(FFTResultsRaw, FFTResults);

  int lengthOfPeakArray = peaks[0][0];

  Serial.println(lengthOfPeakArray);

  // Since we are sotring the length of the array in the first index, we do
  // not start from 0 in the array when printing out. Find out how to get
  // length of a 2D array of a q31_t datatype. For now we return the length of
  // the array in the first index of 2D array, This must be solved, this is
  // not a good solution.
  Serial.println("[Amplitude, Frequency, Phase]");

  for (int i = 1; i < lengthOfPeakArray; i++) {
      Serial.print("[");
      Serial.print(peaks[i][0]);
      Serial.print(", ");
      Serial.print(peaks[i][1]);
      Serial.print(", ");
      Serial.print(peaks[i][2]);
      Serial.print(",");

      // Calculate phase in comprehensible manner =====
      // peaks[i][2] is q31_t type but in the taylor expansion it is actually q15_t, the rest of the 16 MSB are just 0,
      // The reason it is q31_t is just because we send it with all the frequencies, witch are really big and require q31_t to be stored properly
      float32_t phase_in_radians = phaseQ31_to_radianFloat32(peaks[i][2]);

      Serial.print(phase_in_radians);

      Serial.println("],");
  }

  /*
  endTime = micros();
  timeDiff = endTime - startTime;
  Serial.print("StartTime: ");
  Serial.println(startTime);
  Serial.print("EndTime: ");
  Serial.println(endTime);
  Serial.print("Time: ");
  Serial.println(timeDiff); // Just printing the time it takes for the script
                            // to run. The printing and loops associated
  // take time, with all of it it takes around 1700 microseconds
  */
}

void loop() {
  //Serial.println("Test");
}
